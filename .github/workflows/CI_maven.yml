# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven


name: CI Workflow

on:
  push:
    branches:
      - master  # Trigger on push to the master branch

jobs:
  build:
    runs-on: ubuntu-latest  # You can use other runners depending on your requirements

    steps:
      # Step 1: Checkout the code from GitHub
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up JDK (OpenJDK 17 in this case)
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'  # Changed to JDK 17
          distribution: 'adoptopenjdk'

      # Step 3: Cache Maven dependencies to speed up builds
      - name: Cache Maven dependencies
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # Step 4: Run Maven build and tests
      - name: Build with Maven
        run: mvn clean install -DskipTests  # You can add -DskipTests if you don't want to run tests

      # Step 5: Upload the WAR file as an artifact
      - name: Upload WAR file
        uses: actions/upload-artifact@v2
        with:
          name: war-file
          path: target/*.war  # Assuming the WAR file is located in the target directory

  trigger-jenkins-deployment:
    needs: build  # Ensure the build job is completed first
    runs-on: ubuntu-latest

    steps:
      # Step 1: Download the WAR file artifact from the previous job
      - name: Download WAR file
        uses: actions/download-artifact@v2
        with:
          name: war-file
          path: ./war

      # Step 2: Trigger the Jenkins pipeline using Jenkins API
      - name: Trigger Jenkins Pipeline
        env:
          JENKINS_URL: ${{ secrets.JENKINS_URL }}  # Add your Jenkins URL to GitHub Secrets
          JENKINS_USER: ${{ secrets.JENKINS_USER }}  # Add your Jenkins username to GitHub Secrets
          JENKINS_TOKEN: ${{ secrets.JENKINS_TOKEN }}  # Add your Jenkins API token to GitHub Secrets
          JOB_NAME: "deploy-to-tomcat"  # Replace with your Jenkins pipeline job name
        run: |
          # Ensure the WAR file path is URL-encoded before passing it to Jenkins
          WAR_FILE_PATH=$(echo ./war/*.war | sed 's/ /%20/g')
          echo "Triggering Jenkins pipeline with WAR file path: $WAR_FILE_PATH"
          curl -X POST "${JENKINS_URL}/job/${JOB_NAME}/buildWithParameters?token=${JENKINS_TOKEN}&warFile=${WAR_FILE_PATH}"
